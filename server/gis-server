#!/usr/bin/env python

import sys

import pika
import json
import yaml
import pymongo


def get_cmd_options():
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-c", "--config", dest="config", metavar="FILE")
    (options, args) = parser.parse_args()
    return options

# parse command line arguments
conf = 'server.yaml'
cmd_options = get_cmd_options()
if cmd_options.config:
    conf = cmd_options.config
config = yaml.load(open(conf))

# rabbit connection
rabbitconn = pika.BlockingConnection(
    pika.ConnectionParameters(host=config['rabbit']['host']))
channel = rabbitconn.channel()

# mongodb connection
mongoconn = pymongo.Connection()
mongodb = mongoconn[config['mongo']['database']]


print ' [**] Waiting for messages. To exit press CTRL+C'


def clean_database(client_id):

    global mongodb

    print " [**] Cleaning system information for client %s" % (client_id)

    for q in config['queues']:
        collection = mongodb[q]
        collection.remove({'client_id': client_id})


def db_insert(info, collection_name):

    global mongodb

    print " [**] Inserting %s info into database" % (collection_name)

    if collection_name == "client":
        clean_database(info['client_id'])

    collection = mongodb[collection_name]
    collection.insert(info)


def callback(ch, method, properties, body):
    info = json.loads(body)
    print " [<-] Received %s info from %s" % (method.routing_key,
                                              info['client_id'])
    try:
        db_insert(info=info, collection_name=method.routing_key)
    except Exception, e:
        print " [!!] Mongo connection error: " + str(e)
        sys.exit()

for q in config['queues']:
    channel.queue_declare(queue=q)
    channel.basic_consume(callback, queue=q, no_ack=True)

try:
    channel.start_consuming()
except KeyboardInterrupt:
    sys.exit()
